<?php
/**
 * Created by PhpStorm.
 * User: TEMIT
 * Date: 12/02/2017
 * Time: 09:33
 */

/**
 * Implementing hook_permission
 */
function trails_permission() {
  return array(
    'administer trails' => array(
      'title' => t('Administer The Trails Module'),
	  'description' => t('Performs Administration tasks for Trails Module')
	),
	'access trails block' => array(
	'title' => t('Access Trails block'),
	 'description' => t('View block generated by Trails Module')
	)
  );
}

/**
 * Implementing Hook_Menu
 */
function trails_menu(){
  $items['admin/settings/trails'] = array(
    'title' => t('Trails'),
	'description' => t('Trails Configuration'),
	'page callback' => 'drupal_get_form',
	'page arguments' => array('trails_admin_settings'),
	'access arguments' => array('administer trails'),
	'file' => 'trails.admin.inc',
	'file path' => drupal_get_path('module', 'trails'),
  );
  return $items;
}

/*
 * Implementing hook init
 */

/**
 *
 */
function trails_init(){
//grabbing the trails history from  a variable.
// Whenever you use variable_get('variable_name', 'default_value'),the variable
// name is looked up in the $conf array. If it exists, the value is returned; else, the default value is returned.
//So we're taking the trail as an array, so when we grab this variable, regardless of it's structure, it can be an array,
// an object or it can be a simple integer or a string. It will translate back into the variable that we saved it as,
// so in this case it's going to be an array.

// And we're grabbing the trails history and adding new items to it.

//Grabbing the trail history from a variable
  $trails = variable_get('trails_history', array()); //get the value of the variable(trails_variable) if it exit,else get default
  													 //variable which is an array. The 1st time the page load the variable wont exit
  						//so the default variable is get but the 2nd time the page load the set value below is gotten which is an array

  //Creating the values that will exist in the trails_history
  $trails[] = array(
    'title' => strip_tags(drupal_get_title()),
	'path' => $_GET['q'],
	'timestamp' => REQUEST_TIME,
  );

  //saving the trails as a variable
  variable_set('trails_history', $trails); //set the value of the variable which in this case is the $trails
  											//Parameters $name: The name of the variable to set(trails_history).
           //$value: The value to set($trails). This can be any PHP data type; these functions take care of serialization as necessary.
}

/**
 * Implementing hook_cron
 */
function trails_cron(){

  $trails = variable_get('trails_history', array());

  $count_trails = count($trails) - 5;

  $getLast = array_slice($trails, $count_trails);

  variable_set('trails_history', $getLast );

}

/**
 * @return mixed
 * Implementing hook block info
 */

//Provide basic information about the block.
/**
 * @return mixed
 * the key(trails_history) of the block is a unique identifier that identify the block
 * is render
 */
function trails_block_info(){
  $blocks['trails_history'] = array(
    'info' => t('History'),
	'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 * This help to define a configuration for the block
 */
//define configuration form for a block. so its a good practice to wrap these functn up with an if statement
//should in case we have more than one block .the if statement will check to see that the right block(in this case)
//trails_history is getting this configuration and form. same stuff also goes for the block_save.
/**
 * @param string $delta
 * @return mixed
 */
function trails_block_configure($delta = '') {
  if($delta == 'trails_history' ){
  // Getting the maximum allow value from the configure form
  $getMax = variable_get('trails_block_max', 50);

  // Adding a select box to the new form to display the number from 1 up until the value in $getMax

  $form['trails_block_num'] = array(
    '#title' => t('Number of Items to show'),
	'#type' => 'select',
	'#default_value' => variable_get('trails_block_num' , 5),
	'#options' => drupal_map_assoc(range(1, $getMax)),
  );
  return $form;
  }
}

/**
 * Implements hook_block_save().
 */
//Saving the block manually
/**
 * @param string $delta
 * @param array $edit
 */
function trails_block_save($delta = '', $edit = array()) {
 if ($delta == 'trails_history') {
   variable_set('trails_block_num', $edit['trails_block_num']);
 }
}

/**
 * Implements hook_block_view().
 */

//The purpose of our view is to create a link of visited pages and time
/**
 * @param string $delta
 * @return array
 */
function trails_block_view($delta = 'trails_history') {
//checking to see if user has access b4 proceeding.
	if(user_access('access trails block') ) {
	  $block = array();
	  $type = $delta;
	 switch ($type) {
	   case 'trails_history':
		 //Grabbing the trails history from the  variable
		 $trail = variable_get('trails_history', array());
		         //var_dump($trail);
		 if (!empty($trail)) {
		   //flip the save array to show most recent first
		   $reverse_trail = array_reverse($trail);

		 //getting the number of items to display
		 $num_items = variable_get('trails_block_num', '5');

		 //output the visited page as a link
		 $output = '';
		 for ($i = 0; $i < $num_items; $i++) {
		   if ( $display_items = $reverse_trail[$i]  ) {
			 $output .= '<li>' . l($display_items['title'], $display_items['path']) . ' - ' . format_interval(REQUEST_TIME
				 - $display_items['timestamp']) . ' ' . t('ago') . '</li>';
		   }
		 }
		 if (isset($output)) {
		   $output = '<p>' . t("Below is the list of last !num pages visited.", array('!num' => $num_items)) .
			 '</p>' .
			 '<ul>' .
			 $output .
			 '</ul>';
		    }
		 }
		 //turning the $block variable with a subject title and a content $output
		 $block['subject'] = 'History';
		 $block['content'] = $output;
		 break;
	   //return $block;

	  }
	  return $block;
	}

}